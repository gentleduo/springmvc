#Loggers(记录器：日志类别)
#log4j.rootLogger = [ level ] , appenderName, appenderName, … 把指定级别以上的日志信息输出到指定的一个或者多个位置
#level ：设定日志记录的最低级别，可设的值有OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别
#appenderName：就是指定日志信息要输出到哪里。这里的appenderName对应下面Appenders(输出源：日志要输出的地方)配置中log4j.appender后面的appenderName 
log4j.rootLogger=DEBUG,console,debug,info,error

#log4j.additivity.LoggerName表示Logger是否在父Logger的appender里输出，默认为true：会在父Logger的appender里输出。
#如下设置中com.gentleduo为子Logger、当java代码中以Logger.getLogger("com.gentleduo")获取日志对象的时候、日志将会在父Logger的appender里输出。
#这里com.gentleduo的父Logger为：rootLogger
#log4j.logger.com.gentleduo = ERROR,error
#log4j.additivity.com.gentleduo=true

#Appenders(输出源：日志要输出的地方)
#配置模式：
#log4j.appender.appenderName = className
#log4j.appender.appenderName.Option1 = value1
log4j.appender.console=org.apache.log4j.ConsoleAppender
#指定日志信息的最低输出级别，默认为DEBUG；只输出DEBUG级别以上的日志
log4j.appender.console.Threshold=DEBUG
log4j.appender.console.Target=System.out
log4j.appender.console.Encoding=UTF-8
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#%d 输出日志时间点的日期或时间
#%p 输出日志信息的优先级,即DEBUG,INFO,WARN,ERROR,FATAL
#%c 为Logger.getLogger的参数：getLogger(class)的参数用途:追踪产生此日志的类.
#Logger.getLogger("org.apache")：Logger会首先去找log4j.properties中的log4j.logger.org.apache对应的Appender来写日志，如果没有的话会用rootAppender
#%m 输出代码中指定的具体日志信息
#%n 输出一个回车换行符
#另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式，如:
#1)%20c：指定输出类的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#2)%-20c:指定输出类的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
#3)%.30c:指定输出类的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
#4)%20.30c:如果类的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉;
log4j.appender.console.layout.ConversionPattern=%d %5p %c - %m%n 

#debug_log文件
log4j.appender.debug=org.apache.log4j.DailyRollingFileAppender
log4j.appender.debug.Threshold=DEBUG
log4j.appender.debug.Encoding=UTF-8 
log4j.appender.debug.File=${catalina.home}/logs/log4j_debug.log
log4j.appender.debug.DatePattern='.'yyyy-MM-dd-HH
log4j.appender.debug.layout=org.apache.log4j.PatternLayout
log4j.appender.debug.layout.ConversionPattern=%d %5p %c - %m%n 

#info_log文件
log4j.appender.info=org.apache.log4j.DailyRollingFileAppender
log4j.appender.info.Threshold=INFO
log4j.appender.info.Encoding=UTF-8 
log4j.appender.info.File=${catalina.home}/logs/log4j_info.log
log4j.appender.info.DatePattern='.'yyyy-MM-dd-HH
log4j.appender.info.layout=org.apache.log4j.PatternLayout
log4j.appender.info.layout.ConversionPattern=%d %5p %c - %m%n

#error_log文件
log4j.appender.error=org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.Threshold=ERROR
log4j.appender.error.Encoding=UTF-8 
log4j.appender.error.File=${catalina.home}/logs/log4j_error.log
log4j.appender.error.DatePattern='.'yyyy-MM-dd-HH
log4j.appender.error.layout=org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern=%d %5p %c - %m%n

#可以为某个包的类已经特别指定的Appender
#log4j.logger.java.sql.Connection=DEBUG,console
#log4j.logger.java.sql.Statement=DEBUG,console
#log4j.logger.java.sql.PreparedStatement=DEBUG,console 
#log4j.logger.org.mybatis=DEBUG,console
#log4j.logger.org.myrobot.persist=DEBUG,console
#log4j.logger.org.myrobot.dao=DEBUG,console
#log4j.logger.org.myrobot.controller=DEBUG,console

#log4j配置文件中的additivity属性
#它是子Logger是否继承父Logger的输出源（appender）的标志位。具体说，默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出。
#若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。
#使用例子：下面是一个log4j的配置文件，父logger的appender是console与R，子logger是log4j.logger.customizelogger
#log4j.rootLogger=DEBUG,console,R
#
#log4j.appender.console=org.apache.log4j.ConsoleAppender
#log4j.appender.console.layout=org.apache.log4j.PatternLayout
#log4j.appender.console.layout.ConversionPattern=%-5p %d [%t] %c: %m%n
#
#log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.R.File=/export/home/tomcat/mobile/tomcatLogs/tomcat.log
#log4j.appender.R.DatePattern='.'yyyy-MM-dd
#log4j.appender.R.layout=org.apache.log4j.PatternLayout
#log4j.appender.R.layout.ConversionPattern=%-5p %d [%t] %c: %m%n
#
#log4j.logger.customizelogger=ERROR,customizelogger
#log4j.appender.customizelogger=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.customizelogger.Threshold=ERROR
#log4j.appender.customizelogger.Encoding=UTF-8 
#log4j.appender.customizelogger.File=${catalina.home}/logs/log4j_customize.log
#log4j.appender.customizelogger.DatePattern='.'yyyy-MM-dd-HH
#log4j.appender.customizelogger.layout=org.apache.log4j.PatternLayout
#log4j.appender.customizelogger.layout.ConversionPattern=%d %5p %c - %m%n
#log4j.additivity.customizelogger=false
